"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;require("./string.js");

var _sqlTable = _interopRequireDefault(require("./sql-table"));
var _sqlWhere = _interopRequireDefault(require("./sql-where"));
var _sqlQuery = _interopRequireWildcard(require("./sql-query"));function _interopRequireWildcard(obj) {if (obj && obj.__esModule) {return obj;} else {var newObj = {};if (obj != null) {for (var key in obj) {if (Object.prototype.hasOwnProperty.call(obj, key)) {var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};if (desc.get || desc.set) {Object.defineProperty(newObj, key, desc);} else {newObj[key] = obj[key];}}}}newObj.default = obj;return newObj;}}function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}



function updateDelete(operation, sqlTable, details, encryptFunction) {
  if (!(sqlTable instanceof _sqlTable.default)) {
    throw {
      location: 'SqlBuilder::update',
      message: 'sqlTable is not an instance of SqlTable' };
    // eslint-disable-line
  }
  var options = (0, _sqlQuery.getDefaultOptions)();
  var isArray = !options.namedValues || options.markerType === 'number';
  var data = isArray ? [] : {};
  if (details.id) {
    if (!isArray) {
      data.id = details.id;
    } else {
      data.push(details.id);
    }
  }
  var sep = operation === 'update' ? ',' : ' AND ';
  var hasEncryptedValues = false;
  var item = 1;
  var columns = '';
  var attr;
  var variable;
  var encrypted;
  var column;
  for (attr in details) {// eslint-disable-line no-restricted-syntax
    if (details.hasOwnProperty(attr) && attr !== 'id' && sqlTable.hasOwnProperty(attr)) {
      column = sqlTable[attr];
      if (isArray) {
        variable = (item + 1).toString();
        data.push(details[attr]);
      } else {
        variable = attr + item.toString();
        data[variable] = details[attr];
      }
      encrypted = encryptFunction ? encryptFunction(column, variable) : null;
      variable = encrypted || "".concat(options.namedValueMarker).concat(variable);
      if (encrypted != null) {
        hasEncryptedValues = true;
      }
      columns += "".concat(item === 1 ? '' : sep).concat(attr.toSnakeCase(), " = ").concat(variable);
      item += 1;
    }
  }
  var sql;
  if (operation === 'update') {
    if (isArray) {
      sql = "UPDATE ".concat(sqlTable.getTable(), " SET ").concat(columns, " WHERE id = ").concat(options.namedValueMarker, "1");
    } else {
      sql = "UPDATE ".concat(sqlTable.getTable(), " SET ").concat(columns, " WHERE id = ").concat(options.namedValueMarker, "id");
    }
  } else if (operation === 'delete') {
    if (details.id) {
      if (isArray) {
        columns += "".concat(item === 1 ? '' : sep, "id = ").concat(options.namedValueMarker, "1");
      } else {
        columns += "".concat(item === 1 ? '' : sep, "id = ").concat(options.namedValueMarker, "id");
      }
    }
    sql = "DELETE FROM ".concat(sqlTable.getTable(), " WHERE ").concat(columns);
  } else {
    throw new {
      msg: "Invalid operation ".concat(operation) }();
    //eslint-disable-line
  }
  return {
    sql: sql,
    values: data,
    hasEncrypted: hasEncryptedValues };

}

function buildWhere(filterString, sqlTable) {
  var where = null;
  if (filterString) {
    var ors = filterString.split(';');

    ors.forEach(function (orFilter) {
      var filters = orFilter.split(',');
      var whereClause = null;
      filters.forEach(function (filter) {
        var parts = filter.split('.');
        var attr = parts[0];
        var op = parts[1];
        var val1 = parts[2];
        var val2 = parts.length > 3 ? parts[3] : null;
        if (sqlTable.hasOwnProperty(attr)) {
          var tmpClause = sqlTable[attr].op(op, val1, val2);
          if (whereClause) {
            whereClause = whereClause.and(tmpClause);
          } else {
            whereClause = tmpClause;
          }
        } else {
          throw { location: 'SqlBuilder:buildWhere', message: "unknown column ".concat(attr, " in table ").concat(sqlTable.TableName, " from where clause") };
        }
      });
      if (where) {
        where = where.or(whereClause);
      } else {
        where = whereClause;
      }
    });
  }
  return where;
}var

SqlBuilder = /*#__PURE__*/function () {function SqlBuilder() {_classCallCheck(this, SqlBuilder);}_createClass(SqlBuilder, null, [{ key: "update", value: function update(
    sqlTable, details, encryptFunction) {
      return updateDelete('update', sqlTable, details, encryptFunction);
    } }, { key: "delete", value: function _delete(
    sqlTable, details, encryptFunction) {
      return updateDelete('delete', sqlTable, details, encryptFunction);
    } }, { key: "insert", value: function insert(
    sqlTable, details, newId, encryptFunction) {
      if (!(sqlTable instanceof _sqlTable.default)) {
        throw {
          location: 'SqlBuilder::insert',
          message: 'sqlTable is not an instance of SqlTable' };
        //eslint-disable-line
      }
      var options = (0, _sqlQuery.getDefaultOptions)();
      var isArray = !options.namedValues || options.markerType === 'number';
      var item = 1;
      var data = isArray ? [] : {};
      var variable;
      var encrypted;
      var column;
      var columnList = '';
      var variableList = '';
      var hasEncryptedValues = false;
      for (var attr in details) {// eslint-disable-line no-restricted-syntax
        if (details.hasOwnProperty(attr) && attr !== 'id' && sqlTable.hasOwnProperty(attr)) {
          column = sqlTable[attr];
          if (isArray) {
            variable = item.toString();
            data.push(details[attr]);
          } else {
            variable = attr + item.toString();
            data[variable] = details[attr];
          }
          columnList += (item === 1 ? '' : ',') + attr.toSnakeCase();
          encrypted = encryptFunction ? encryptFunction(column, variable) : null;
          variable = encrypted || "".concat(options.namedValueMarker).concat(variable);
          if (encrypted != null) {
            hasEncryptedValues = true;
          }
          variableList += "".concat(item === 1 ? '' : ',').concat(variable);
          item += 1;
        }
      }
      if (newId) {
        columnList += ', id';
        if (isArray) {
          variableList += ", ".concat(options.namedValueMarker).concat(item);
          data.push(newId);
        } else {
          variableList += ", ".concat(options.namedValueMarker, "id");
          data.id = newId;
        }
      }

      return {
        sql: "INSERT INTO ".concat(sqlTable.getTable(), " (").concat(columnList, ") VALUES (").concat(variableList, ")"),
        values: data,
        hasEncrypted: hasEncryptedValues };

    }
    /*
       * @param {sqlTable} - SqlTable instance for the table to build the update for
       * @param {searchDetails} - object
       *  - select = columns to select from the table (comma separated)
       *  - filter =
       *      = string - where clause column.OP.value,... comma = AND'ed semi-colon = OR'ed
       *          example:
       *                 { select: 'key.gt.9;key.lt.2' } = key > 9 OR key < 2
       *                 { select: 'key.gt.9,name.like.foo;key.lt2 } = (key > 9 AND name like '%foo%') OR (key < 2)
       *      = array of string - column.OP.value... will be OR'ed with each other string
       *  - orderBy = column;[ASC|DESC],...
       *  - pageNo = which page to fetch of paged data defaults to 1st
       *  - pageSize = how much data per page defaults to 50
       */ }, { key: "search", value: function search(

    sqlTable, searchDetails) {
      var query = new _sqlQuery.default();
      query.from(sqlTable);
      var searchColumns = searchDetails.columns || searchDetails.select;
      if (searchColumns) {
        var columns = null;
        if (Array.isArray(searchColumns)) {
          columns = searchColumns;
        } else {
          columns = searchColumns.split(',');
        }
        columns.forEach(function (c) {
          if (sqlTable.hasOwnProperty(c.toCamel())) {
            query.select(sqlTable[c.toCamel()]);
          } else {
            throw { location: 'SqlBuilder:search - columns', message: "(columns) unknown column for table ".concat(sqlTable.TableName, " - ").concat(c) };
          }
        });
      } else {
        query.select(sqlTable.star());
      }

      var whereClause = new _sqlWhere.default();
      if (searchDetails.filter) {
        if (Array.isArray(searchDetails.filter)) {
          searchDetails.filter.forEach(function (filter) {
            whereClause.or(buildWhere(filter, sqlTable));
          });
        } else {
          whereClause = buildWhere(searchDetails.filter, sqlTable);
        }
      }
      if (whereClause) {
        query.where(whereClause);
      }
      if (searchDetails.orderBy) {
        if (Array.isArray(searchDetails.orderBy)) {
          searchDetails.orderBy.forEach(function (c) {
            if (sqlTable.hasOwnProperty(c)) {
              query.orderBy(sqlTable[c]);
            } else {
              throw { location: 'SqlBuilder:Search - orderBy', message: "unknown column for table ".concat(sqlTable.TableName, " - ").concat(c) };
            }
          });
        } else {
          searchDetails.orderBy.split(',').forEach(function (c) {
            var columnDetails = c.split(';');
            var name = columnDetails[0];
            if (sqlTable.hasOwnProperty(name)) {
              query.orderBy(sqlTable[name].dir(columnDetails[1] || 'ASC'));
            } else {
              throw { location: 'SqlBuilder:Search - orderBy2', message: "unknown column for table ".concat(sqlTable.TableName, " - ").concat(c) };
            }
          });
        }
      }
      if (searchDetails.pageNo) {
        query.page(searchDetails.pageNo);
      }
      if (searchDetails.pageSize) {
        query.pageSize(searchDetails.pageSize);
      }
      if (!searchDetails.pageNo && !searchDetails.pageSize) {
        query.pageSize(50);
      }
      return query;
    } }]);return SqlBuilder;}();exports.default = SqlBuilder;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,