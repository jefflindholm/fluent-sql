"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;function toCamel() {
  return this.replace(/[\-_][a-z]/g, function (m) {
    return m.toUpperCase().replace(/[\-_]/, '');
  });
};
function trim() {
  return this.replace(/^\s+|\s+$/g, '');
};
function toDashCase() {
  var result = this.replace(/[A-Z]/g, function (m) {
    return "-".concat(m.toLowerCase());
  });
  result = result.replace(/_/g, '-');
  return result[0] === '-' ? result.substring(1) : result;
};
function toSnakeCase() {
  var result = this.replace(/[A-Z]/g, function (m) {
    return "_".concat(m.toLowerCase());
  });
  result = result.replace(/\-/g, '_');
  return result[0] === '_' ? result.substring(1) : result;
};
function capitalizeFirst() {
  return this.charAt(0).toUpperCase() + this.slice(1);
};
function toPascal() {
  return this.toCamel().capitalizeFirst();
};
function contains(s) {
  return this.indexOf(s) > -1;
};

(function () {
  'use strict';
  var stringFunctions = {
    toCamel: toCamel,
    trim: trim,
    toDashCase: toDashCase,
    toSnakeCase: toSnakeCase,
    capitalizeFirst: capitalizeFirst,
    toPascal: toPascal,
    contains: contains };


  for (var key in stringFunctions) {
    if (String.prototype.hasOwnProperty(key)) {
      continue;
    }
    Object.defineProperty(String.prototype, key, {
      value: stringFunctions[key],
      writable: true });

  }

})();var _default =

{
  toCamel: toCamel,
  trim: trim,
  toDashCase: toDashCase,
  toSnakeCase: toSnakeCase,
  capitalizeFirst: capitalizeFirst,
  toPascal: toPascal,
  contains: contains };exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9zdHJpbmcuanMiXSwibmFtZXMiOlsidG9DYW1lbCIsInJlcGxhY2UiLCJtIiwidG9VcHBlckNhc2UiLCJ0cmltIiwidG9EYXNoQ2FzZSIsInJlc3VsdCIsInRvTG93ZXJDYXNlIiwic3Vic3RyaW5nIiwidG9TbmFrZUNhc2UiLCJjYXBpdGFsaXplRmlyc3QiLCJjaGFyQXQiLCJzbGljZSIsInRvUGFzY2FsIiwiY29udGFpbnMiLCJzIiwiaW5kZXhPZiIsInN0cmluZ0Z1bmN0aW9ucyIsImtleSIsIlN0cmluZyIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJ2YWx1ZSIsIndyaXRhYmxlIl0sIm1hcHBpbmdzIjoib0dBQUEsU0FBU0EsT0FBVCxHQUFtQjtBQUNmLFNBQU8sS0FBS0MsT0FBTCxDQUFhLGFBQWIsRUFBNEIsVUFBQ0MsQ0FBRCxFQUFPO0FBQ3RDLFdBQU9BLENBQUMsQ0FBQ0MsV0FBRixHQUFnQkYsT0FBaEIsQ0FBd0IsT0FBeEIsRUFBaUMsRUFBakMsQ0FBUDtBQUNILEdBRk0sQ0FBUDtBQUdIO0FBQ0QsU0FBU0csSUFBVCxHQUFpQjtBQUNiLFNBQU8sS0FBS0gsT0FBTCxDQUFhLFlBQWIsRUFBMkIsRUFBM0IsQ0FBUDtBQUNIO0FBQ0QsU0FBU0ksVUFBVCxHQUF1QjtBQUNuQixNQUFJQyxNQUFNLEdBQUcsS0FBS0wsT0FBTCxDQUFhLFFBQWIsRUFBdUIsVUFBQ0MsQ0FBRCxFQUFPO0FBQ3ZDLHNCQUFXQSxDQUFDLENBQUNLLFdBQUYsRUFBWDtBQUNILEdBRlksQ0FBYjtBQUdBRCxFQUFBQSxNQUFNLEdBQUdBLE1BQU0sQ0FBQ0wsT0FBUCxDQUFlLElBQWYsRUFBcUIsR0FBckIsQ0FBVDtBQUNBLFNBQVFLLE1BQU0sQ0FBQyxDQUFELENBQU4sS0FBYyxHQUFmLEdBQXNCQSxNQUFNLENBQUNFLFNBQVAsQ0FBaUIsQ0FBakIsQ0FBdEIsR0FBNENGLE1BQW5EO0FBQ0g7QUFDRCxTQUFTRyxXQUFULEdBQXdCO0FBQ3BCLE1BQUlILE1BQU0sR0FBRyxLQUFLTCxPQUFMLENBQWEsUUFBYixFQUF1QixVQUFDQyxDQUFELEVBQU87QUFDdkMsc0JBQVdBLENBQUMsQ0FBQ0ssV0FBRixFQUFYO0FBQ0gsR0FGWSxDQUFiO0FBR0FELEVBQUFBLE1BQU0sR0FBR0EsTUFBTSxDQUFDTCxPQUFQLENBQWUsS0FBZixFQUFzQixHQUF0QixDQUFUO0FBQ0EsU0FBUUssTUFBTSxDQUFDLENBQUQsQ0FBTixLQUFjLEdBQWYsR0FBc0JBLE1BQU0sQ0FBQ0UsU0FBUCxDQUFpQixDQUFqQixDQUF0QixHQUE0Q0YsTUFBbkQ7QUFDSDtBQUNELFNBQVNJLGVBQVQsR0FBNEI7QUFDeEIsU0FBTyxLQUFLQyxNQUFMLENBQVksQ0FBWixFQUFlUixXQUFmLEtBQStCLEtBQUtTLEtBQUwsQ0FBVyxDQUFYLENBQXRDO0FBQ0g7QUFDRCxTQUFTQyxRQUFULEdBQXFCO0FBQ2pCLFNBQU8sS0FBS2IsT0FBTCxHQUFlVSxlQUFmLEVBQVA7QUFDSDtBQUNELFNBQVNJLFFBQVQsQ0FBbUJDLENBQW5CLEVBQXNCO0FBQ2xCLFNBQU8sS0FBS0MsT0FBTCxDQUFhRCxDQUFiLElBQWtCLENBQUMsQ0FBMUI7QUFDSDs7QUFFRCxDQUFDLFlBQVc7QUFDUjtBQUNBLE1BQU1FLGVBQWUsR0FBRztBQUNwQmpCLElBQUFBLE9BQU8sRUFBUEEsT0FEb0I7QUFFcEJJLElBQUFBLElBQUksRUFBSkEsSUFGb0I7QUFHcEJDLElBQUFBLFVBQVUsRUFBVkEsVUFIb0I7QUFJcEJJLElBQUFBLFdBQVcsRUFBWEEsV0FKb0I7QUFLcEJDLElBQUFBLGVBQWUsRUFBZkEsZUFMb0I7QUFNcEJHLElBQUFBLFFBQVEsRUFBUkEsUUFOb0I7QUFPcEJDLElBQUFBLFFBQVEsRUFBUkEsUUFQb0IsRUFBeEI7OztBQVVBLE9BQUssSUFBTUksR0FBWCxJQUFrQkQsZUFBbEIsRUFBbUM7QUFDL0IsUUFBSUUsTUFBTSxDQUFDQyxTQUFQLENBQWlCQyxjQUFqQixDQUFnQ0gsR0FBaEMsQ0FBSixFQUEwQztBQUN0QztBQUNIO0FBQ0RJLElBQUFBLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQkosTUFBTSxDQUFDQyxTQUE3QixFQUF3Q0YsR0FBeEMsRUFBNkM7QUFDekNNLE1BQUFBLEtBQUssRUFBRVAsZUFBZSxDQUFDQyxHQUFELENBRG1CO0FBRXpDTyxNQUFBQSxRQUFRLEVBQUUsSUFGK0IsRUFBN0M7O0FBSUg7O0FBRUosQ0F0QkQsSTs7QUF3QmU7QUFDWHpCLEVBQUFBLE9BQU8sRUFBUEEsT0FEVztBQUVYSSxFQUFBQSxJQUFJLEVBQUpBLElBRlc7QUFHWEMsRUFBQUEsVUFBVSxFQUFWQSxVQUhXO0FBSVhJLEVBQUFBLFdBQVcsRUFBWEEsV0FKVztBQUtYQyxFQUFBQSxlQUFlLEVBQWZBLGVBTFc7QUFNWEcsRUFBQUEsUUFBUSxFQUFSQSxRQU5XO0FBT1hDLEVBQUFBLFFBQVEsRUFBUkEsUUFQVyxFIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gdG9DYW1lbCgpIHtcbiAgICByZXR1cm4gdGhpcy5yZXBsYWNlKC9bXFwtX11bYS16XS9nLCAobSkgPT4ge1xuICAgICAgICByZXR1cm4gbS50b1VwcGVyQ2FzZSgpLnJlcGxhY2UoL1tcXC1fXS8sICcnKTtcbiAgICB9KTtcbn07XG5mdW5jdGlvbiB0cmltKCkgIHtcbiAgICByZXR1cm4gdGhpcy5yZXBsYWNlKC9eXFxzK3xcXHMrJC9nLCAnJyk7XG59O1xuZnVuY3Rpb24gdG9EYXNoQ2FzZSgpICB7XG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucmVwbGFjZSgvW0EtWl0vZywgKG0pID0+IHtcbiAgICAgICAgcmV0dXJuIGAtJHttLnRvTG93ZXJDYXNlKCl9YDtcbiAgICB9KTtcbiAgICByZXN1bHQgPSByZXN1bHQucmVwbGFjZSgvXy9nLCAnLScpXG4gICAgcmV0dXJuIChyZXN1bHRbMF0gPT09ICctJykgPyByZXN1bHQuc3Vic3RyaW5nKDEpIDogcmVzdWx0O1xufTtcbmZ1bmN0aW9uIHRvU25ha2VDYXNlKCkgIHtcbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZXBsYWNlKC9bQS1aXS9nLCAobSkgPT4ge1xuICAgICAgICByZXR1cm4gYF8ke20udG9Mb3dlckNhc2UoKX1gO1xuICAgIH0pO1xuICAgIHJlc3VsdCA9IHJlc3VsdC5yZXBsYWNlKC9cXC0vZywgJ18nKVxuICAgIHJldHVybiAocmVzdWx0WzBdID09PSAnXycpID8gcmVzdWx0LnN1YnN0cmluZygxKSA6IHJlc3VsdDtcbn07XG5mdW5jdGlvbiBjYXBpdGFsaXplRmlyc3QoKSAge1xuICAgIHJldHVybiB0aGlzLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgdGhpcy5zbGljZSgxKTtcbn07XG5mdW5jdGlvbiB0b1Bhc2NhbCgpICB7XG4gICAgcmV0dXJuIHRoaXMudG9DYW1lbCgpLmNhcGl0YWxpemVGaXJzdCgpO1xufTtcbmZ1bmN0aW9uIGNvbnRhaW5zIChzKSB7XG4gICAgcmV0dXJuIHRoaXMuaW5kZXhPZihzKSA+IC0xO1xufTtcblxuKGZ1bmN0aW9uKCkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICBjb25zdCBzdHJpbmdGdW5jdGlvbnMgPSB7XG4gICAgICAgIHRvQ2FtZWwsXG4gICAgICAgIHRyaW0sXG4gICAgICAgIHRvRGFzaENhc2UsXG4gICAgICAgIHRvU25ha2VDYXNlLFxuICAgICAgICBjYXBpdGFsaXplRmlyc3QsXG4gICAgICAgIHRvUGFzY2FsLFxuICAgICAgICBjb250YWlucyxcbiAgICB9O1xuXG4gICAgZm9yIChjb25zdCBrZXkgaW4gc3RyaW5nRnVuY3Rpb25zKSB7XG4gICAgICAgIGlmIChTdHJpbmcucHJvdG90eXBlLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTdHJpbmcucHJvdG90eXBlLCBrZXksIHtcbiAgICAgICAgICAgIHZhbHVlOiBzdHJpbmdGdW5jdGlvbnNba2V5XSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICB9KTtcbiAgICB9XG5cbn0pKCk7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICB0b0NhbWVsLFxuICAgIHRyaW0sXG4gICAgdG9EYXNoQ2FzZSxcbiAgICB0b1NuYWtlQ2FzZSxcbiAgICBjYXBpdGFsaXplRmlyc3QsXG4gICAgdG9QYXNjYWwsXG4gICAgY29udGFpbnMsXG59O1xuIl19